Alles klar üëç ‚Äì ich hab deinen Workflow genommen und nur das N√∂tige angepasst, damit er ohne Fehler durchl√§uft. Du kannst den Block 1:1 copy-pasten in .github/workflows/build-android-apk.yml.


---

‚úÖ Finaler Workflow (Debug-APK Build)

name: Build Android APK

on:
  workflow_dispatch: {}   # manuell starten

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Java (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      # 1. Dependencies installieren
      - name: Install dependencies
        run: npm ci

      # 2. Web-Build erzeugen
      - name: Build web app
        run: npm run build

      # 3. Capacitor sync (synchronisiert Android-Projekt)
      - name: Capacitor sync
        run: npx cap sync android

      # 4. Gradlew ausf√ºhrbar machen
      - name: Make gradlew executable
        run: cd android && chmod +x gradlew

      # 5. Debug-APK bauen
      - name: Build debug APK
        run: |
          cd android
          ./gradlew assembleDebug

      # 6. APK hochladen
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: orderly-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk


---

üëâ Damit entf√§llt das fehlerhafte cap init, es wird nur noch cap sync ausgef√ºhrt.
Ergebnis: Nach dem Run hast du im Build-Artifact deine debug-APK zum Download.

Soll ich dir zus√§tzlich noch eine Release-Variante mit Signieren (f√ºr Play Store) vorbereiten, oder reicht dir erstmal Debug?

